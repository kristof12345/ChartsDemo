@using Syncfusion.Blazor.Charts

<div class="e-stockchart" style="height:450px; width:100%; padding: 20px;">
    @if (!Loaded)
    {
        <div class="loadingindicator" />
    }


<SfStockChart Theme=@Theme.MaterialDark>
    <StockChartEvents OnLoaded=@OnLoad />
    <StockChartPrimaryXAxis IntervalType="IntervalType.Days" DesiredIntervals="16" LabelFormat="yyyy.MM.dd" EnableAutoIntervalOnZooming="false" />
    <StockChartChartBorder Width="0" />
    <StockChartAxes>
        <StockChartAxis RowIndex=0 OpposedPosition="false" Name="VolumeAxis" Visible="false" Maximum=@Max />
    </StockChartAxes>
    <StockChartRows>
        <StockChartRow Height="100%" />
        <StockChartRow Height="10%" />
    </StockChartRows>
    @if (Data != null)
    {
        <StockChartSeriesCollection>
            @ChildContent
        </StockChartSeriesCollection>
    }
        <StockChartPeriods>
            <StockChartPeriod Text="Last week" IntervalType=RangeIntervalType.Weeks Interval="1" />
            <StockChartPeriod Text="Last month" IntervalType=RangeIntervalType.Months Interval="1" />
            <StockChartPeriod Text="Last year" IntervalType=RangeIntervalType.Years Interval="1" Selected="true" />
            <StockChartPeriod Text="All" />
        </StockChartPeriods>
    </SfStockChart>

</div>

@code
{

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public IEnumerable<StockPrice> Data { get; set; }

    private bool Loaded { get; set; }

    protected void OnLoad(StockChartEventArgs args)
    {
        Loaded = true;
        StateHasChanged();
    }

    private long Max { get { return Data == null ? 0 : Data.Max(s => s.Volume) * 5; } }
}
